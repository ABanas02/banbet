// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using banbet.Data;

#nullable disable

namespace banbet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241119114119_AddedCategory")]
    partial class AddedCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("banbet.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminID"));

                    b.Property<string>("AdminUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("banbet.Models.Bet", b =>
                {
                    b.Property<int>("BetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BetID"));

                    b.Property<decimal>("BetAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BetStatus")
                        .HasColumnType("integer");

                    b.Property<int>("BetType")
                        .HasColumnType("integer");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<decimal>("OddsAtBetTime")
                        .HasColumnType("numeric");

                    b.Property<int>("OddsID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("BetID");

                    b.HasIndex("EventID");

                    b.HasIndex("OddsID");

                    b.HasIndex("UserID");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("banbet.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventID"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("banbet.Models.EventTeam", b =>
                {
                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<int>("TeamID")
                        .HasColumnType("integer");

                    b.HasKey("EventID", "TeamID");

                    b.HasIndex("TeamID");

                    b.ToTable("EventTeams");
                });

            modelBuilder.Entity("banbet.Models.IdentityDocument", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer");

                    b.HasKey("DocumentID");

                    b.HasIndex("UserID");

                    b.ToTable("IdentityDocuments");
                });

            modelBuilder.Entity("banbet.Models.Odd", b =>
                {
                    b.Property<int>("OddsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OddsID"));

                    b.Property<int>("BetType")
                        .HasColumnType("integer");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OddsValue")
                        .HasColumnType("numeric");

                    b.Property<int?>("TeamID")
                        .HasColumnType("integer");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.HasKey("OddsID");

                    b.HasIndex("EventID");

                    b.HasIndex("TeamID");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("banbet.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerID"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamID")
                        .HasColumnType("integer");

                    b.HasKey("PlayerID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("banbet.Models.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamID"));

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("League")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("banbet.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("TransactionID");

                    b.HasIndex("UserID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("banbet.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsIdentityVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("VirtualBalance")
                        .HasColumnType("numeric");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("banbet.Models.Bet", b =>
                {
                    b.HasOne("banbet.Models.Event", "Event")
                        .WithMany("Bets")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("banbet.Models.Odd", "Odd")
                        .WithMany()
                        .HasForeignKey("OddsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("banbet.Models.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Odd");

                    b.Navigation("User");
                });

            modelBuilder.Entity("banbet.Models.EventTeam", b =>
                {
                    b.HasOne("banbet.Models.Event", "Event")
                        .WithMany("EventTeams")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("banbet.Models.Team", "Team")
                        .WithMany("EventTeams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("banbet.Models.IdentityDocument", b =>
                {
                    b.HasOne("banbet.Models.User", "User")
                        .WithMany("IdentityDocuments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("banbet.Models.Odd", b =>
                {
                    b.HasOne("banbet.Models.Event", "Event")
                        .WithMany("Odds")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("banbet.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID");

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("banbet.Models.Player", b =>
                {
                    b.HasOne("banbet.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("banbet.Models.Transaction", b =>
                {
                    b.HasOne("banbet.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("banbet.Models.Event", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("EventTeams");

                    b.Navigation("Odds");
                });

            modelBuilder.Entity("banbet.Models.Team", b =>
                {
                    b.Navigation("EventTeams");
                });

            modelBuilder.Entity("banbet.Models.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("IdentityDocuments");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
